{"version":3,"sources":["base64.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":[";(function(root){\n\n  var charMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n  function enc(input) {\n    var str = String(input);\n    var map = charMap;\n    var block = 0,\n        output = '';\n    var prx = [2, 4, 6, 8];\n    for (var code, idx = 3 / 4, uarr;\n    // 能取到字符时、block未处理完时、长度不足时\n    !isNaN(code = str.charCodeAt(idx)) || 63 & block || (map = '=', (idx - 3 / 4) % 1); idx += 3 / 4) {\n      if (code > 0x7F) {\n        // utf8字符处理\n        (uarr = encodeURI(str.charAt(idx)).split('%')).shift();\n        for (var hex, idx2 = idx % 1; hex = uarr[idx2 | 0]; idx2 += 3 / 4) {\n          block = block << 8 | parseInt(hex, 16);\n          output += map.charAt(63 & block >> 8 - idx2 % 1 * 8);\n        }\n        idx = idx === 3 / 4 ? 0 : idx; // 修复首字符为utf8字符时出错的BUG\n        idx += 3 / 4 * uarr.length % 1; // idx补偿\n      } else {\n        block = block << 8 | code;\n        output += map.charAt(63 & block >> 8 - idx % 1 * 8);\n      }\n    }\n    return output;\n  }\n\n  function dec(input) {\n    var str = String(input),\n        map = charMap.slice(0, -1),\n        prx = [6, 4, 2, 0],\n        output = '',\n        block = 0,\n        code,\n        buffer = 0,\n        hex = '';\n    try {\n      for (var i = 0; (code = map.indexOf(str[i])) > -1; i++) {\n        block = block << 6 | code;\n        if (i % 4) {\n          buffer = 255 & block >> prx[i % 4];\n          if (buffer < 128) {\n            output += hex ? decodeURI(hex) : '';\n            output += String.fromCharCode(buffer);\n            hex = '';\n          } else {\n            hex += '%' + ('0' + buffer.toString(16)).slice(-2);\n          }\n        }\n      }\n      output += hex ? decodeURI(hex) : '';\n      return output;\n    } catch (err) {\n      // console.log(err);\n      throw new Error('base64 malformed!');\n    }\n  }\n\n  var base64 = {\n    encode: enc,\n    decode: dec\n  };\n\n  if (typeof define === 'function' && define.amd) {\n    define(function() {\n      return base64;\n    });\n  } else if (typeof exports === 'object') {\n    for (var key in base64) {\n      base64.hasOwnProperty(key) && (exports[key] = base64[key]);\n    }\n  } else {\n    root.base64 = base64;\n  }\n\n})(typeof global === 'object' && global || this);\n"]}